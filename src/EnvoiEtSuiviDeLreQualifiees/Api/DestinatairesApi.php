<?php
/**
 * DestinatairesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Maileva / Création et envoi de Lettres Recommandées Electroniques qualifiées
 *
 * API pour créer et envoyer des Lettres Recommandées Electroniques qualifiée  Elles comprennent les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options (Nom, Champ libre, référence dossier, référence client)  - envoyer ses lettres recommandées électroniques qualifiées.    **Paramétrage de compte expéditeur :**     Chaque expéditeur d'une Lettre Recommandée Electronique qualifiée doit posséder un compte expéditeur. Il est donc nécessaire de paramétrer son compte expéditeur en passant par l'API <a href=\"/developpeur/electronic_mail_emitter\"> electronic_mail_emitter</a> ou en se connectant à son espace client www.maileva.com et en suivant les étapes de paramétrage de compte sur le produit Lettre Recommandée Electronique qualifiée.     Une fois le paramétrage du compte finalisé, vous recevrez sous 72h, un recommandé papier à l'adresse postale de l'expéditeur. Il contient un QR Code, la clé OTP et les explications nécessaires pour l'utiliser et générer ses codes à usage unique. Ces informations sont personnelles et confidentielles.    **Authentification OTP :**    L'authentification OTP est obligatoire pour effectuer des envois de Lettres Recommandées Electroniques qualifiées. La clé OTP doit être demandée à l'expéditeur à chaque envoi. Elle permet de générer un code à usage unique permettant une authentification à un niveau renforcé. Cette clé OTP ne doit pas être stockée dans votre application.     Pour générer un code à usage unique vous pouvez :     - Demander à l'expéditeur de télécharger une application mobile telle Google Authenticator ou Free OTP puis de scanner le QR Code sur son smartphone.     - Demander à l'expéditeur d'utiliser un générateur de codes à usage unique depuis son navigateur (par exemple : https://otp-client.ar24.fr/) et de recopier sa clé OTP de 32 caractères présente sur les identifiants papiers obtenus.
 *
 * The version of the OpenAPI document: 1.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException;
use Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Configuration;
use Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\HeaderSelector;
use Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ObjectSerializer;

/**
 * DestinatairesApi Class Doc Comment
 *
 * @category Class
 * @package  Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinatairesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createDocument2' => [
            'application/json',
        ],
        'deleteAllRecipients' => [
            'application/json',
        ],
        'deleteRecipient' => [
            'application/json',
        ],
        'downloadDeliveryProof' => [
            'application/json',
        ],
        'downloadDepositProof' => [
            'application/json',
        ],
        'getRecipient' => [
            'application/json',
        ],
        'getRecipients' => [
            'application/json',
        ],
        'sendingsSendingIdRecipientsImportsPost' => [
            'application/json',
        ],
        'updateRecipient' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDocument2
     *
     * Ajout d&#39;un destinataire à l&#39;envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientCreation $recipient_creation Nouveau destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument2'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function createDocument2($sending_id, $recipient_creation, string $contentType = self::contentTypes['createDocument2'][0])
    {
        list($response) = $this->createDocument2WithHttpInfo($sending_id, $recipient_creation, $contentType);
        return $response;
    }

    /**
     * Operation createDocument2WithHttpInfo
     *
     * Ajout d&#39;un destinataire à l&#39;envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientCreation $recipient_creation Nouveau destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument2'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocument2WithHttpInfo($sending_id, $recipient_creation, string $contentType = self::contentTypes['createDocument2'][0])
    {
        $request = $this->createDocument2Request($sending_id, $recipient_creation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDocument2Async
     *
     * Ajout d&#39;un destinataire à l&#39;envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientCreation $recipient_creation Nouveau destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocument2Async($sending_id, $recipient_creation, string $contentType = self::contentTypes['createDocument2'][0])
    {
        return $this->createDocument2AsyncWithHttpInfo($sending_id, $recipient_creation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDocument2AsyncWithHttpInfo
     *
     * Ajout d&#39;un destinataire à l&#39;envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientCreation $recipient_creation Nouveau destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocument2AsyncWithHttpInfo($sending_id, $recipient_creation, string $contentType = self::contentTypes['createDocument2'][0])
    {
        $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse';
        $request = $this->createDocument2Request($sending_id, $recipient_creation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDocument2'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientCreation $recipient_creation Nouveau destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDocument2Request($sending_id, $recipient_creation, string $contentType = self::contentTypes['createDocument2'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling createDocument2'
            );
        }

        // verify the required parameter 'recipient_creation' is set
        if ($recipient_creation === null || (is_array($recipient_creation) && count($recipient_creation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_creation when calling createDocument2'
            );
        }


        $resourcePath = '/sendings/{sending_id}/recipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($recipient_creation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($recipient_creation));
            } else {
                $httpBody = $recipient_creation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllRecipients
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllRecipients'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function deleteAllRecipients($sending_id, string $contentType = self::contentTypes['deleteAllRecipients'][0])
    {
        list($response) = $this->deleteAllRecipientsWithHttpInfo($sending_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteAllRecipientsWithHttpInfo
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllRecipients'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllRecipientsWithHttpInfo($sending_id, string $contentType = self::contentTypes['deleteAllRecipients'][0])
    {
        $request = $this->deleteAllRecipientsRequest($sending_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 204:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllRecipientsAsync
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllRecipients'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllRecipientsAsync($sending_id, string $contentType = self::contentTypes['deleteAllRecipients'][0])
    {
        return $this->deleteAllRecipientsAsyncWithHttpInfo($sending_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllRecipientsAsyncWithHttpInfo
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllRecipients'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllRecipientsAsyncWithHttpInfo($sending_id, string $contentType = self::contentTypes['deleteAllRecipients'][0])
    {
        $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse';
        $request = $this->deleteAllRecipientsRequest($sending_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllRecipients'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllRecipients'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAllRecipientsRequest($sending_id, string $contentType = self::contentTypes['deleteAllRecipients'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling deleteAllRecipients'
            );
        }


        $resourcePath = '/sendings/{sending_id}/recipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRecipient
     *
     * Suppression d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecipient'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function deleteRecipient($sending_id, $recipient_id, string $contentType = self::contentTypes['deleteRecipient'][0])
    {
        list($response) = $this->deleteRecipientWithHttpInfo($sending_id, $recipient_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteRecipientWithHttpInfo
     *
     * Suppression d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecipient'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRecipientWithHttpInfo($sending_id, $recipient_id, string $contentType = self::contentTypes['deleteRecipient'][0])
    {
        $request = $this->deleteRecipientRequest($sending_id, $recipient_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 204:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRecipientAsync
     *
     * Suppression d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecipientAsync($sending_id, $recipient_id, string $contentType = self::contentTypes['deleteRecipient'][0])
    {
        return $this->deleteRecipientAsyncWithHttpInfo($sending_id, $recipient_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRecipientAsyncWithHttpInfo
     *
     * Suppression d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecipientAsyncWithHttpInfo($sending_id, $recipient_id, string $contentType = self::contentTypes['deleteRecipient'][0])
    {
        $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse';
        $request = $this->deleteRecipientRequest($sending_id, $recipient_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRecipient'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRecipientRequest($sending_id, $recipient_id, string $contentType = self::contentTypes['deleteRecipient'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling deleteRecipient'
            );
        }

        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling deleteRecipient'
            );
        }


        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadDeliveryProof
     *
     * Télécharger le justificatif de réception du destinataire (accusé de reception, refus ou non réclamation)
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDeliveryProof'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function downloadDeliveryProof($sending_id, $recipient_id, string $contentType = self::contentTypes['downloadDeliveryProof'][0])
    {
        list($response) = $this->downloadDeliveryProofWithHttpInfo($sending_id, $recipient_id, $contentType);
        return $response;
    }

    /**
     * Operation downloadDeliveryProofWithHttpInfo
     *
     * Télécharger le justificatif de réception du destinataire (accusé de reception, refus ou non réclamation)
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDeliveryProof'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadDeliveryProofWithHttpInfo($sending_id, $recipient_id, string $contentType = self::contentTypes['downloadDeliveryProof'][0])
    {
        $request = $this->downloadDeliveryProofRequest($sending_id, $recipient_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadDeliveryProofAsync
     *
     * Télécharger le justificatif de réception du destinataire (accusé de reception, refus ou non réclamation)
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDeliveryProof'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDeliveryProofAsync($sending_id, $recipient_id, string $contentType = self::contentTypes['downloadDeliveryProof'][0])
    {
        return $this->downloadDeliveryProofAsyncWithHttpInfo($sending_id, $recipient_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadDeliveryProofAsyncWithHttpInfo
     *
     * Télécharger le justificatif de réception du destinataire (accusé de reception, refus ou non réclamation)
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDeliveryProof'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDeliveryProofAsyncWithHttpInfo($sending_id, $recipient_id, string $contentType = self::contentTypes['downloadDeliveryProof'][0])
    {
        $returnType = 'string';
        $request = $this->downloadDeliveryProofRequest($sending_id, $recipient_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadDeliveryProof'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDeliveryProof'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadDeliveryProofRequest($sending_id, $recipient_id, string $contentType = self::contentTypes['downloadDeliveryProof'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling downloadDeliveryProof'
            );
        }

        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling downloadDeliveryProof'
            );
        }


        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}/download_delivery_proof';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadDepositProof
     *
     * Télécharger la preuve de dépot du destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDepositProof'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function downloadDepositProof($sending_id, $recipient_id, string $contentType = self::contentTypes['downloadDepositProof'][0])
    {
        list($response) = $this->downloadDepositProofWithHttpInfo($sending_id, $recipient_id, $contentType);
        return $response;
    }

    /**
     * Operation downloadDepositProofWithHttpInfo
     *
     * Télécharger la preuve de dépot du destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDepositProof'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadDepositProofWithHttpInfo($sending_id, $recipient_id, string $contentType = self::contentTypes['downloadDepositProof'][0])
    {
        $request = $this->downloadDepositProofRequest($sending_id, $recipient_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadDepositProofAsync
     *
     * Télécharger la preuve de dépot du destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDepositProof'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDepositProofAsync($sending_id, $recipient_id, string $contentType = self::contentTypes['downloadDepositProof'][0])
    {
        return $this->downloadDepositProofAsyncWithHttpInfo($sending_id, $recipient_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadDepositProofAsyncWithHttpInfo
     *
     * Télécharger la preuve de dépot du destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDepositProof'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDepositProofAsyncWithHttpInfo($sending_id, $recipient_id, string $contentType = self::contentTypes['downloadDepositProof'][0])
    {
        $returnType = 'string';
        $request = $this->downloadDepositProofRequest($sending_id, $recipient_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadDepositProof'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDepositProof'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadDepositProofRequest($sending_id, $recipient_id, string $contentType = self::contentTypes['downloadDepositProof'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling downloadDepositProof'
            );
        }

        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling downloadDepositProof'
            );
        }


        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}/download_deposit_proof';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecipient
     *
     * Détail d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecipient'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function getRecipient($sending_id, $recipient_id, string $contentType = self::contentTypes['getRecipient'][0])
    {
        list($response) = $this->getRecipientWithHttpInfo($sending_id, $recipient_id, $contentType);
        return $response;
    }

    /**
     * Operation getRecipientWithHttpInfo
     *
     * Détail d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecipient'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecipientWithHttpInfo($sending_id, $recipient_id, string $contentType = self::contentTypes['getRecipient'][0])
    {
        $request = $this->getRecipientRequest($sending_id, $recipient_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecipientAsync
     *
     * Détail d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecipientAsync($sending_id, $recipient_id, string $contentType = self::contentTypes['getRecipient'][0])
    {
        return $this->getRecipientAsyncWithHttpInfo($sending_id, $recipient_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecipientAsyncWithHttpInfo
     *
     * Détail d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecipientAsyncWithHttpInfo($sending_id, $recipient_id, string $contentType = self::contentTypes['getRecipient'][0])
    {
        $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientResponse';
        $request = $this->getRecipientRequest($sending_id, $recipient_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecipient'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRecipientRequest($sending_id, $recipient_id, string $contentType = self::contentTypes['getRecipient'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling getRecipient'
            );
        }

        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling getRecipient'
            );
        }


        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecipients
     *
     * Liste des destinataires d&#39;un envoi
     *
     * @param  string $sending_id sending_id (required)
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $sort sort (optional)
     * @param  string $desc desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecipients'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function getRecipients($sending_id, $start_index = 1, $count = 50, $sort = null, $desc = null, string $contentType = self::contentTypes['getRecipients'][0])
    {
        list($response) = $this->getRecipientsWithHttpInfo($sending_id, $start_index, $count, $sort, $desc, $contentType);
        return $response;
    }

    /**
     * Operation getRecipientsWithHttpInfo
     *
     * Liste des destinataires d&#39;un envoi
     *
     * @param  string $sending_id (required)
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecipients'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecipientsWithHttpInfo($sending_id, $start_index = 1, $count = 50, $sort = null, $desc = null, string $contentType = self::contentTypes['getRecipients'][0])
    {
        $request = $this->getRecipientsRequest($sending_id, $start_index, $count, $sort, $desc, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecipientsAsync
     *
     * Liste des destinataires d&#39;un envoi
     *
     * @param  string $sending_id (required)
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecipients'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecipientsAsync($sending_id, $start_index = 1, $count = 50, $sort = null, $desc = null, string $contentType = self::contentTypes['getRecipients'][0])
    {
        return $this->getRecipientsAsyncWithHttpInfo($sending_id, $start_index, $count, $sort, $desc, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecipientsAsyncWithHttpInfo
     *
     * Liste des destinataires d&#39;un envoi
     *
     * @param  string $sending_id (required)
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecipients'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecipientsAsyncWithHttpInfo($sending_id, $start_index = 1, $count = 50, $sort = null, $desc = null, string $contentType = self::contentTypes['getRecipients'][0])
    {
        $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientsResponse';
        $request = $this->getRecipientsRequest($sending_id, $start_index, $count, $sort, $desc, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecipients'
     *
     * @param  string $sending_id (required)
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecipients'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRecipientsRequest($sending_id, $start_index = 1, $count = 50, $sort = null, $desc = null, string $contentType = self::contentTypes['getRecipients'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling getRecipients'
            );
        }

        if ($start_index !== null && $start_index < 1) {
            throw new \InvalidArgumentException('invalid value for "$start_index" when calling DestinatairesApi.getRecipients, must be bigger than or equal to 1.');
        }
        
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling DestinatairesApi.getRecipients, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/sendings/{sending_id}/recipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'start_index', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $desc,
            'desc', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPost
     *
     * Ajout d&#39;un ou de plusieurs destinataire(s) à l&#39;envoi via un import déjà réalisé
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipients $import_recipients import_recipients (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsImportsPost'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipientsResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function sendingsSendingIdRecipientsImportsPost($sending_id, $import_recipients = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsImportsPost'][0])
    {
        list($response) = $this->sendingsSendingIdRecipientsImportsPostWithHttpInfo($sending_id, $import_recipients, $contentType);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPostWithHttpInfo
     *
     * Ajout d&#39;un ou de plusieurs destinataire(s) à l&#39;envoi via un import déjà réalisé
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipients $import_recipients (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsImportsPost'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipientsResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsImportsPostWithHttpInfo($sending_id, $import_recipients = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsImportsPost'][0])
    {
        $request = $this->sendingsSendingIdRecipientsImportsPostRequest($sending_id, $import_recipients, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipientsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipientsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipientsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipientsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPostAsync
     *
     * Ajout d&#39;un ou de plusieurs destinataire(s) à l&#39;envoi via un import déjà réalisé
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipients $import_recipients (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsImportsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsImportsPostAsync($sending_id, $import_recipients = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsImportsPost'][0])
    {
        return $this->sendingsSendingIdRecipientsImportsPostAsyncWithHttpInfo($sending_id, $import_recipients, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPostAsyncWithHttpInfo
     *
     * Ajout d&#39;un ou de plusieurs destinataire(s) à l&#39;envoi via un import déjà réalisé
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipients $import_recipients (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsImportsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsImportsPostAsyncWithHttpInfo($sending_id, $import_recipients = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsImportsPost'][0])
    {
        $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipientsResponse';
        $request = $this->sendingsSendingIdRecipientsImportsPostRequest($sending_id, $import_recipients, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsImportsPost'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ImportRecipients $import_recipients (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsImportsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdRecipientsImportsPostRequest($sending_id, $import_recipients = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsImportsPost'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdRecipientsImportsPost'
            );
        }



        $resourcePath = '/sendings/{sending_id}/recipients/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($import_recipients)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($import_recipients));
            } else {
                $httpBody = $import_recipients;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRecipient
     *
     * Modification partielle d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientUpdate $recipient_update recipient_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRecipient'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\SendingResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function updateRecipient($sending_id, $recipient_id, $recipient_update, string $contentType = self::contentTypes['updateRecipient'][0])
    {
        list($response) = $this->updateRecipientWithHttpInfo($sending_id, $recipient_id, $recipient_update, $contentType);
        return $response;
    }

    /**
     * Operation updateRecipientWithHttpInfo
     *
     * Modification partielle d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientUpdate $recipient_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRecipient'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\SendingResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRecipientWithHttpInfo($sending_id, $recipient_id, $recipient_update, string $contentType = self::contentTypes['updateRecipient'][0])
    {
        $request = $this->updateRecipientRequest($sending_id, $recipient_id, $recipient_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\SendingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\SendingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\SendingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\SendingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\SendingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRecipientAsync
     *
     * Modification partielle d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientUpdate $recipient_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRecipientAsync($sending_id, $recipient_id, $recipient_update, string $contentType = self::contentTypes['updateRecipient'][0])
    {
        return $this->updateRecipientAsyncWithHttpInfo($sending_id, $recipient_id, $recipient_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRecipientAsyncWithHttpInfo
     *
     * Modification partielle d&#39;un destinataire
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientUpdate $recipient_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRecipientAsyncWithHttpInfo($sending_id, $recipient_id, $recipient_update, string $contentType = self::contentTypes['updateRecipient'][0])
    {
        $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\SendingResponse';
        $request = $this->updateRecipientRequest($sending_id, $recipient_id, $recipient_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRecipient'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientUpdate $recipient_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRecipientRequest($sending_id, $recipient_id, $recipient_update, string $contentType = self::contentTypes['updateRecipient'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling updateRecipient'
            );
        }

        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling updateRecipient'
            );
        }

        // verify the required parameter 'recipient_update' is set
        if ($recipient_update === null || (is_array($recipient_update) && count($recipient_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_update when calling updateRecipient'
            );
        }


        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($recipient_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($recipient_update));
            } else {
                $httpBody = $recipient_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
