<?php
/**
 * DocumentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Maileva / Création et envoi de Lettres Recommandées Electroniques qualifiées
 *
 * API pour créer et envoyer des Lettres Recommandées Electroniques qualifiée  Elles comprennent les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options (Nom, Champ libre, référence dossier, référence client)  - envoyer ses lettres recommandées électroniques qualifiées.    **Paramétrage de compte expéditeur :**     Chaque expéditeur d'une Lettre Recommandée Electronique qualifiée doit posséder un compte expéditeur. Il est donc nécessaire de paramétrer son compte expéditeur en passant par l'API <a href=\"/developpeur/electronic_mail_emitter\"> electronic_mail_emitter</a> ou en se connectant à son espace client www.maileva.com et en suivant les étapes de paramétrage de compte sur le produit Lettre Recommandée Electronique qualifiée.     Une fois le paramétrage du compte finalisé, vous recevrez sous 72h, un recommandé papier à l'adresse postale de l'expéditeur. Il contient un QR Code, la clé OTP et les explications nécessaires pour l'utiliser et générer ses codes à usage unique. Ces informations sont personnelles et confidentielles.    **Authentification OTP :**    L'authentification OTP est obligatoire pour effectuer des envois de Lettres Recommandées Electroniques qualifiées. La clé OTP doit être demandée à l'expéditeur à chaque envoi. Elle permet de générer un code à usage unique permettant une authentification à un niveau renforcé. Cette clé OTP ne doit pas être stockée dans votre application.     Pour générer un code à usage unique vous pouvez :     - Demander à l'expéditeur de télécharger une application mobile telle Google Authenticator ou Free OTP puis de scanner le QR Code sur son smartphone.     - Demander à l'expéditeur d'utiliser un générateur de codes à usage unique depuis son navigateur (par exemple : https://otp-client.ar24.fr/) et de recopier sa clé OTP de 32 caractères présente sur les identifiants papiers obtenus.
 *
 * The version of the OpenAPI document: 1.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException;
use Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Configuration;
use Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\HeaderSelector;
use Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ObjectSerializer;

/**
 * DocumentsApi Class Doc Comment
 *
 * @category Class
 * @package  Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createDocument' => [
            'application/json',
        ],
        'getDocument' => [
            'application/json',
        ],
        'getDocument1' => [
            'application/json',
        ],
        'getDocuments' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDocument
     *
     * Ajout d&#39;un document à l&#39;envoi.
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\CreateDocumentRequest $create_document_request create_document_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function createDocument($sending_id, $create_document_request = null, string $contentType = self::contentTypes['createDocument'][0])
    {
        list($response) = $this->createDocumentWithHttpInfo($sending_id, $create_document_request, $contentType);
        return $response;
    }

    /**
     * Operation createDocumentWithHttpInfo
     *
     * Ajout d&#39;un document à l&#39;envoi.
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\CreateDocumentRequest $create_document_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocumentWithHttpInfo($sending_id, $create_document_request = null, string $contentType = self::contentTypes['createDocument'][0])
    {
        $request = $this->createDocumentRequest($sending_id, $create_document_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDocumentAsync
     *
     * Ajout d&#39;un document à l&#39;envoi.
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\CreateDocumentRequest $create_document_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentAsync($sending_id, $create_document_request = null, string $contentType = self::contentTypes['createDocument'][0])
    {
        return $this->createDocumentAsyncWithHttpInfo($sending_id, $create_document_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDocumentAsyncWithHttpInfo
     *
     * Ajout d&#39;un document à l&#39;envoi.
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\CreateDocumentRequest $create_document_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentAsyncWithHttpInfo($sending_id, $create_document_request = null, string $contentType = self::contentTypes['createDocument'][0])
    {
        $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse';
        $request = $this->createDocumentRequest($sending_id, $create_document_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDocument'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\CreateDocumentRequest $create_document_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDocumentRequest($sending_id, $create_document_request = null, string $contentType = self::contentTypes['createDocument'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling createDocument'
            );
        }



        $resourcePath = '/sendings/{sending_id}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_document_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_document_request));
            } else {
                $httpBody = $create_document_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocument
     *
     * Détail d&#39;un document
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function getDocument($sending_id, $document_id, string $contentType = self::contentTypes['getDocument'][0])
    {
        list($response) = $this->getDocumentWithHttpInfo($sending_id, $document_id, $contentType);
        return $response;
    }

    /**
     * Operation getDocumentWithHttpInfo
     *
     * Détail d&#39;un document
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentWithHttpInfo($sending_id, $document_id, string $contentType = self::contentTypes['getDocument'][0])
    {
        $request = $this->getDocumentRequest($sending_id, $document_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentAsync
     *
     * Détail d&#39;un document
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentAsync($sending_id, $document_id, string $contentType = self::contentTypes['getDocument'][0])
    {
        return $this->getDocumentAsyncWithHttpInfo($sending_id, $document_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentAsyncWithHttpInfo
     *
     * Détail d&#39;un document
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentAsyncWithHttpInfo($sending_id, $document_id, string $contentType = self::contentTypes['getDocument'][0])
    {
        $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentResponse';
        $request = $this->getDocumentRequest($sending_id, $document_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocument'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentRequest($sending_id, $document_id, string $contentType = self::contentTypes['getDocument'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling getDocument'
            );
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getDocument'
            );
        }


        $resourcePath = '/sendings/{sending_id}/documents/{document_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'document_id' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocument1
     *
     * Suppression d&#39;un document
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument1'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getDocument1($sending_id, $document_id, string $contentType = self::contentTypes['getDocument1'][0])
    {
        $this->getDocument1WithHttpInfo($sending_id, $document_id, $contentType);
    }

    /**
     * Operation getDocument1WithHttpInfo
     *
     * Suppression d&#39;un document
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument1'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocument1WithHttpInfo($sending_id, $document_id, string $contentType = self::contentTypes['getDocument1'][0])
    {
        $request = $this->getDocument1Request($sending_id, $document_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocument1Async
     *
     * Suppression d&#39;un document
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocument1Async($sending_id, $document_id, string $contentType = self::contentTypes['getDocument1'][0])
    {
        return $this->getDocument1AsyncWithHttpInfo($sending_id, $document_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocument1AsyncWithHttpInfo
     *
     * Suppression d&#39;un document
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocument1AsyncWithHttpInfo($sending_id, $document_id, string $contentType = self::contentTypes['getDocument1'][0])
    {
        $returnType = '';
        $request = $this->getDocument1Request($sending_id, $document_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocument1'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocument1Request($sending_id, $document_id, string $contentType = self::contentTypes['getDocument1'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling getDocument1'
            );
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getDocument1'
            );
        }


        $resourcePath = '/sendings/{sending_id}/documents/{document_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'document_id' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocuments
     *
     * Liste des documents d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 30)
     * @param  string $sort sort (optional)
     * @param  string $desc desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentsResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto
     */
    public function getDocuments($sending_id, $start_index = 1, $count = 30, $sort = null, $desc = null, string $contentType = self::contentTypes['getDocuments'][0])
    {
        list($response) = $this->getDocumentsWithHttpInfo($sending_id, $start_index, $count, $sort, $desc, $contentType);
        return $response;
    }

    /**
     * Operation getDocumentsWithHttpInfo
     *
     * Liste des documents d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 30)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentsResponse|\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentsWithHttpInfo($sending_id, $start_index = 1, $count = 30, $sort = null, $desc = null, string $contentType = self::contentTypes['getDocuments'][0])
    {
        $request = $this->getDocumentsRequest($sending_id, $start_index, $count, $sort, $desc, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentsAsync
     *
     * Liste des documents d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 30)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentsAsync($sending_id, $start_index = 1, $count = 30, $sort = null, $desc = null, string $contentType = self::contentTypes['getDocuments'][0])
    {
        return $this->getDocumentsAsyncWithHttpInfo($sending_id, $start_index, $count, $sort, $desc, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentsAsyncWithHttpInfo
     *
     * Liste des documents d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 30)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentsAsyncWithHttpInfo($sending_id, $start_index = 1, $count = 30, $sort = null, $desc = null, string $contentType = self::contentTypes['getDocuments'][0])
    {
        $returnType = '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\DocumentsResponse';
        $request = $this->getDocumentsRequest($sending_id, $start_index, $count, $sort, $desc, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocuments'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 30)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentsRequest($sending_id, $start_index = 1, $count = 30, $sort = null, $desc = null, string $contentType = self::contentTypes['getDocuments'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling getDocuments'
            );
        }

        if ($start_index !== null && $start_index < 1) {
            throw new \InvalidArgumentException('invalid value for "$start_index" when calling DocumentsApi.getDocuments, must be bigger than or equal to 1.');
        }
        
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling DocumentsApi.getDocuments, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/sendings/{sending_id}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'start_index', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $desc,
            'desc', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
