<?php
/**
 * RecipientResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Maileva / Création et envoi de Lettres Recommandées Electroniques qualifiées
 *
 * API pour créer et envoyer des Lettres Recommandées Electroniques qualifiée  Elles comprennent les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options (Nom, Champ libre, référence dossier, référence client)  - envoyer ses lettres recommandées électroniques qualifiées.    **Paramétrage de compte expéditeur :**     Chaque expéditeur d'une Lettre Recommandée Electronique qualifiée doit posséder un compte expéditeur. Il est donc nécessaire de paramétrer son compte expéditeur en passant par l'API <a href=\"/developpeur/electronic_mail_emitter\"> electronic_mail_emitter</a> ou en se connectant à son espace client www.maileva.com et en suivant les étapes de paramétrage de compte sur le produit Lettre Recommandée Electronique qualifiée.     Une fois le paramétrage du compte finalisé, vous recevrez sous 72h, un recommandé papier à l'adresse postale de l'expéditeur. Il contient un QR Code, la clé OTP et les explications nécessaires pour l'utiliser et générer ses codes à usage unique. Ces informations sont personnelles et confidentielles.    **Authentification OTP :**    L'authentification OTP est obligatoire pour effectuer des envois de Lettres Recommandées Electroniques qualifiées. La clé OTP doit être demandée à l'expéditeur à chaque envoi. Elle permet de générer un code à usage unique permettant une authentification à un niveau renforcé. Cette clé OTP ne doit pas être stockée dans votre application.     Pour générer un code à usage unique vous pouvez :     - Demander à l'expéditeur de télécharger une application mobile telle Google Authenticator ou Free OTP puis de scanner le QR Code sur son smartphone.     - Demander à l'expéditeur d'utiliser un générateur de codes à usage unique depuis son navigateur (par exemple : https://otp-client.ar24.fr/) et de recopier sa clé OTP de 32 caractères présente sur les identifiants papiers obtenus.
 *
 * The version of the OpenAPI document: 1.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model;

use \ArrayAccess;
use \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\ObjectSerializer;

/**
 * RecipientResponse Class Doc Comment
 *
 * @category Class
 * @package  Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecipientResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RecipientResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'custom_id' => 'string',
        'legal_status' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'company' => 'string',
        'status' => 'string',
        'status_detail' => 'string',
        'status_date' => '\DateTime',
        'delivery_proof' => '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientProofResource',
        'deposit_proof' => '\Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientProofResource'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'custom_id' => null,
        'legal_status' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'company' => null,
        'status' => null,
        'status_detail' => null,
        'status_date' => 'date-time',
        'delivery_proof' => null,
        'deposit_proof' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'custom_id' => false,
		'legal_status' => false,
		'first_name' => false,
		'last_name' => false,
		'email' => false,
		'company' => false,
		'status' => false,
		'status_detail' => false,
		'status_date' => false,
		'delivery_proof' => false,
		'deposit_proof' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'custom_id' => 'custom_id',
        'legal_status' => 'legal_status',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'email' => 'email',
        'company' => 'company',
        'status' => 'status',
        'status_detail' => 'status_detail',
        'status_date' => 'status_date',
        'delivery_proof' => 'delivery_proof',
        'deposit_proof' => 'deposit_proof'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'custom_id' => 'setCustomId',
        'legal_status' => 'setLegalStatus',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'company' => 'setCompany',
        'status' => 'setStatus',
        'status_detail' => 'setStatusDetail',
        'status_date' => 'setStatusDate',
        'delivery_proof' => 'setDeliveryProof',
        'deposit_proof' => 'setDepositProof'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'custom_id' => 'getCustomId',
        'legal_status' => 'getLegalStatus',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'company' => 'getCompany',
        'status' => 'getStatus',
        'status_detail' => 'getStatusDetail',
        'status_date' => 'getStatusDate',
        'delivery_proof' => 'getDeliveryProof',
        'deposit_proof' => 'getDepositProof'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LEGAL_STATUS_PROFESSIONAL = 'PROFESSIONAL';
    public const LEGAL_STATUS_INDIVIDUAL = 'INDIVIDUAL';
    public const STATUS_DRAFT = 'DRAFT';
    public const STATUS_PENDING = 'PENDING';
    public const STATUS_PROCESSED = 'PROCESSED';
    public const STATUS_CANCELED = 'CANCELED';
    public const STATUS_REJECTED = 'REJECTED';
    public const STATUS_ACCEPTED = 'ACCEPTED';
    public const STATUS_REFUSED = 'REFUSED';
    public const STATUS_NOT_CLAIMED = 'NOT_CLAIMED';
    public const STATUS_ERROR = 'ERROR';
    public const STATUS_TO_UPDATE = 'TO_UPDATE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLegalStatusAllowableValues()
    {
        return [
            self::LEGAL_STATUS_PROFESSIONAL,
            self::LEGAL_STATUS_INDIVIDUAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_PENDING,
            self::STATUS_PROCESSED,
            self::STATUS_CANCELED,
            self::STATUS_REJECTED,
            self::STATUS_ACCEPTED,
            self::STATUS_REFUSED,
            self::STATUS_NOT_CLAIMED,
            self::STATUS_ERROR,
            self::STATUS_TO_UPDATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('custom_id', $data ?? [], null);
        $this->setIfExists('legal_status', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_detail', $data ?? [], null);
        $this->setIfExists('status_date', $data ?? [], null);
        $this->setIfExists('delivery_proof', $data ?? [], null);
        $this->setIfExists('deposit_proof', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLegalStatusAllowableValues();
        if (!is_null($this->container['legal_status']) && !in_array($this->container['legal_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'legal_status', must be one of '%s'",
                $this->container['legal_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['email']) && !preg_match("/^[\\w]{1,}[\\w.+-]{0,}@[\\w-]{2,}([.][a-zA-Z]{2,}|[.][\\w-]{2,}[.][a-zA-Z]{2,})+$/", $this->container['email'])) {
            $invalidProperties[] = "invalid value for 'email', must be conform to the pattern /^[\\w]{1,}[\\w.+-]{0,}@[\\w-]{2,}([.][a-zA-Z]{2,}|[.][\\w-]{2,}[.][a-zA-Z]{2,})+$/.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Identifiant du destinataire
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets custom_id
     *
     * @return string|null
     */
    public function getCustomId()
    {
        return $this->container['custom_id'];
    }

    /**
     * Sets custom_id
     *
     * @param string|null $custom_id Identifiant du destinataire fourni par le client
     *
     * @return self
     */
    public function setCustomId($custom_id)
    {
        if (is_null($custom_id)) {
            throw new \InvalidArgumentException('non-nullable custom_id cannot be null');
        }
        $this->container['custom_id'] = $custom_id;

        return $this;
    }

    /**
     * Gets legal_status
     *
     * @return string|null
     */
    public function getLegalStatus()
    {
        return $this->container['legal_status'];
    }

    /**
     * Sets legal_status
     *
     * @param string|null $legal_status Type de destinataire
     *
     * @return self
     */
    public function setLegalStatus($legal_status)
    {
        if (is_null($legal_status)) {
            throw new \InvalidArgumentException('non-nullable legal_status cannot be null');
        }
        $allowedValues = $this->getLegalStatusAllowableValues();
        if (!in_array($legal_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'legal_status', must be one of '%s'",
                    $legal_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['legal_status'] = $legal_status;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Prénom du destinataire
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Nom du destinataire
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Adresse email du destinataire
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        if ((!preg_match("/^[\\w]{1,}[\\w.+-]{0,}@[\\w-]{2,}([.][a-zA-Z]{2,}|[.][\\w-]{2,}[.][a-zA-Z]{2,})+$/", $email))) {
            throw new \InvalidArgumentException("invalid value for \$email when calling RecipientResponse., must conform to the pattern /^[\\w]{1,}[\\w.+-]{0,}@[\\w-]{2,}([.][a-zA-Z]{2,}|[.][\\w-]{2,}[.][a-zA-Z]{2,})+$/.");
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Société du destinataire
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Statut du destinataire.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_detail
     *
     * @return string|null
     */
    public function getStatusDetail()
    {
        return $this->container['status_detail'];
    }

    /**
     * Sets status_detail
     *
     * @param string|null $status_detail Détail d'un statut (cause du rejet)
     *
     * @return self
     */
    public function setStatusDetail($status_detail)
    {
        if (is_null($status_detail)) {
            throw new \InvalidArgumentException('non-nullable status_detail cannot be null');
        }
        $this->container['status_detail'] = $status_detail;

        return $this;
    }

    /**
     * Gets status_date
     *
     * @return \DateTime|null
     */
    public function getStatusDate()
    {
        return $this->container['status_date'];
    }

    /**
     * Sets status_date
     *
     * @param \DateTime|null $status_date Date du statut de l'envoi
     *
     * @return self
     */
    public function setStatusDate($status_date)
    {
        if (is_null($status_date)) {
            throw new \InvalidArgumentException('non-nullable status_date cannot be null');
        }
        $this->container['status_date'] = $status_date;

        return $this;
    }

    /**
     * Gets delivery_proof
     *
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientProofResource|null
     */
    public function getDeliveryProof()
    {
        return $this->container['delivery_proof'];
    }

    /**
     * Sets delivery_proof
     *
     * @param \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientProofResource|null $delivery_proof delivery_proof
     *
     * @return self
     */
    public function setDeliveryProof($delivery_proof)
    {
        if (is_null($delivery_proof)) {
            throw new \InvalidArgumentException('non-nullable delivery_proof cannot be null');
        }
        $this->container['delivery_proof'] = $delivery_proof;

        return $this;
    }

    /**
     * Gets deposit_proof
     *
     * @return \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientProofResource|null
     */
    public function getDepositProof()
    {
        return $this->container['deposit_proof'];
    }

    /**
     * Sets deposit_proof
     *
     * @param \Cube43\Component\MailEva\EnvoiEtSuiviDeLreQualifiees\Model\RecipientProofResource|null $deposit_proof deposit_proof
     *
     * @return self
     */
    public function setDepositProof($deposit_proof)
    {
        if (is_null($deposit_proof)) {
            throw new \InvalidArgumentException('non-nullable deposit_proof cannot be null');
        }
        $this->container['deposit_proof'] = $deposit_proof;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


