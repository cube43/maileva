<?php
/**
 * EnvoiApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Cube43\Component\MailEva
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Maileva / Création et envoi de Lettres Recommandées Electroniques qualifiées
 *
 * API pour créer et envoyer des Lettres Recommandées Electroniques qualifiée  Elles comprennent les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options (Nom, Champ libre, référence dossier, référence client)  - envoyer ses lettres recommandées électroniques qualifiées.    **Paramétrage de compte expéditeur :**     Chaque expéditeur d'une Lettre Recommandée Electronique qualifiée doit posséder un compte expéditeur. Il est donc nécessaire de paramétrer son compte expéditeur en passant par l'API <a href=\"/developpeur/electronic_mail_emitter\"> electronic_mail_emitter</a> ou en se connectant à son espace client www.maileva.com et en suivant les étapes de paramétrage de compte sur le produit Lettre Recommandée Electronique qualifiée.     Une fois le paramétrage du compte finalisé, vous recevrez sous 72h, un recommandé papier à l'adresse postale de l'expéditeur. Il contient un QR Code, la clé OTP et les explications nécessaires pour l'utiliser et générer ses codes à usage unique. Ces informations sont personnelles et confidentielles.    **Authentification OTP :**    L'authentification OTP est obligatoire pour effectuer des envois de Lettres Recommandées Electroniques qualifiées. La clé OTP doit être demandée à l'expéditeur à chaque envoi. Elle permet de générer un code à usage unique permettant une authentification à un niveau renforcé. Cette clé OTP ne doit pas être stockée dans votre application.     Pour générer un code à usage unique vous pouvez :     - Demander à l'expéditeur de télécharger une application mobile telle Google Authenticator ou Free OTP puis de scanner le QR Code sur son smartphone.     - Demander à l'expéditeur d'utiliser un générateur de codes à usage unique depuis son navigateur (par exemple : https://otp-client.ar24.fr/) et de recopier sa clé OTP de 32 caractères présente sur les identifiants papiers obtenus.
 *
 * The version of the OpenAPI document: 1.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cube43\Component\MailEva\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cube43\Component\MailEva\ApiException;
use Cube43\Component\MailEva\Configuration;
use Cube43\Component\MailEva\HeaderSelector;
use Cube43\Component\MailEva\ObjectSerializer;

/**
 * EnvoiApi Class Doc Comment
 *
 * @category Class
 * @package  Cube43\Component\MailEva
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnvoiApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createSender' => [
            'application/json',
        ],
        'deleteSender' => [
            'application/json',
        ],
        'findSendings' => [
            'application/json',
        ],
        'getSending' => [
            'application/json',
        ],
        'submitSending' => [
            'application/json',
        ],
        'updateSender' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createSender
     *
     * Création d&#39;un envoi
     *
     * @param  \Cube43\Component\MailEva\Model\SendingCreation $sending_creation Nouvel envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSender'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\Model\SendingResponse|\Cube43\Component\MailEva\Model\ErrorsDto
     */
    public function createSender($sending_creation, string $contentType = self::contentTypes['createSender'][0])
    {
        list($response) = $this->createSenderWithHttpInfo($sending_creation, $contentType);
        return $response;
    }

    /**
     * Operation createSenderWithHttpInfo
     *
     * Création d&#39;un envoi
     *
     * @param  \Cube43\Component\MailEva\Model\SendingCreation $sending_creation Nouvel envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSender'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\Model\SendingResponse|\Cube43\Component\MailEva\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSenderWithHttpInfo($sending_creation, string $contentType = self::contentTypes['createSender'][0])
    {
        $request = $this->createSenderRequest($sending_creation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Cube43\Component\MailEva\Model\SendingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\Model\SendingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\Model\SendingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\Model\SendingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\SendingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSenderAsync
     *
     * Création d&#39;un envoi
     *
     * @param  \Cube43\Component\MailEva\Model\SendingCreation $sending_creation Nouvel envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSenderAsync($sending_creation, string $contentType = self::contentTypes['createSender'][0])
    {
        return $this->createSenderAsyncWithHttpInfo($sending_creation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSenderAsyncWithHttpInfo
     *
     * Création d&#39;un envoi
     *
     * @param  \Cube43\Component\MailEva\Model\SendingCreation $sending_creation Nouvel envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSenderAsyncWithHttpInfo($sending_creation, string $contentType = self::contentTypes['createSender'][0])
    {
        $returnType = '\Cube43\Component\MailEva\Model\SendingResponse';
        $request = $this->createSenderRequest($sending_creation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSender'
     *
     * @param  \Cube43\Component\MailEva\Model\SendingCreation $sending_creation Nouvel envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSenderRequest($sending_creation, string $contentType = self::contentTypes['createSender'][0])
    {

        // verify the required parameter 'sending_creation' is set
        if ($sending_creation === null || (is_array($sending_creation) && count($sending_creation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_creation when calling createSender'
            );
        }


        $resourcePath = '/sendings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sending_creation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sending_creation));
            } else {
                $httpBody = $sending_creation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSender
     *
     * Suppression d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSender'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSender($sending_id, string $contentType = self::contentTypes['deleteSender'][0])
    {
        $this->deleteSenderWithHttpInfo($sending_id, $contentType);
    }

    /**
     * Operation deleteSenderWithHttpInfo
     *
     * Suppression d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSender'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSenderWithHttpInfo($sending_id, string $contentType = self::contentTypes['deleteSender'][0])
    {
        $request = $this->deleteSenderRequest($sending_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSenderAsync
     *
     * Suppression d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSenderAsync($sending_id, string $contentType = self::contentTypes['deleteSender'][0])
    {
        return $this->deleteSenderAsyncWithHttpInfo($sending_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSenderAsyncWithHttpInfo
     *
     * Suppression d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSenderAsyncWithHttpInfo($sending_id, string $contentType = self::contentTypes['deleteSender'][0])
    {
        $returnType = '';
        $request = $this->deleteSenderRequest($sending_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSender'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSenderRequest($sending_id, string $contentType = self::contentTypes['deleteSender'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling deleteSender'
            );
        }


        $resourcePath = '/sendings/{sending_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findSendings
     *
     * Liste des envois
     *
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $sort sort (optional)
     * @param  string $desc desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSendings'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\Model\SendingsResponse|\Cube43\Component\MailEva\Model\ErrorsDto
     */
    public function findSendings($start_index = 1, $count = 50, $sort = null, $desc = null, string $contentType = self::contentTypes['findSendings'][0])
    {
        list($response) = $this->findSendingsWithHttpInfo($start_index, $count, $sort, $desc, $contentType);
        return $response;
    }

    /**
     * Operation findSendingsWithHttpInfo
     *
     * Liste des envois
     *
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSendings'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\Model\SendingsResponse|\Cube43\Component\MailEva\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function findSendingsWithHttpInfo($start_index = 1, $count = 50, $sort = null, $desc = null, string $contentType = self::contentTypes['findSendings'][0])
    {
        $request = $this->findSendingsRequest($start_index, $count, $sort, $desc, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cube43\Component\MailEva\Model\SendingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\Model\SendingsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\Model\SendingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\Model\SendingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\SendingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findSendingsAsync
     *
     * Liste des envois
     *
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSendings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSendingsAsync($start_index = 1, $count = 50, $sort = null, $desc = null, string $contentType = self::contentTypes['findSendings'][0])
    {
        return $this->findSendingsAsyncWithHttpInfo($start_index, $count, $sort, $desc, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findSendingsAsyncWithHttpInfo
     *
     * Liste des envois
     *
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSendings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSendingsAsyncWithHttpInfo($start_index = 1, $count = 50, $sort = null, $desc = null, string $contentType = self::contentTypes['findSendings'][0])
    {
        $returnType = '\Cube43\Component\MailEva\Model\SendingsResponse';
        $request = $this->findSendingsRequest($start_index, $count, $sort, $desc, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findSendings'
     *
     * @param  int $start_index Le premier élément à retourner (optional, default to 1)
     * @param  int $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $sort (optional)
     * @param  string $desc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSendings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findSendingsRequest($start_index = 1, $count = 50, $sort = null, $desc = null, string $contentType = self::contentTypes['findSendings'][0])
    {

        if ($start_index !== null && $start_index < 1) {
            throw new \InvalidArgumentException('invalid value for "$start_index" when calling EnvoiApi.findSendings, must be bigger than or equal to 1.');
        }
        
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling EnvoiApi.findSendings, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/sendings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'start_index', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $desc,
            'desc', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSending
     *
     * Détail d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSending'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\Model\SendingResponse|\Cube43\Component\MailEva\Model\ErrorsDto
     */
    public function getSending($sending_id, string $contentType = self::contentTypes['getSending'][0])
    {
        list($response) = $this->getSendingWithHttpInfo($sending_id, $contentType);
        return $response;
    }

    /**
     * Operation getSendingWithHttpInfo
     *
     * Détail d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSending'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\Model\SendingResponse|\Cube43\Component\MailEva\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSendingWithHttpInfo($sending_id, string $contentType = self::contentTypes['getSending'][0])
    {
        $request = $this->getSendingRequest($sending_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cube43\Component\MailEva\Model\SendingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\Model\SendingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\Model\SendingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\Model\SendingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\SendingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSendingAsync
     *
     * Détail d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSending'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSendingAsync($sending_id, string $contentType = self::contentTypes['getSending'][0])
    {
        return $this->getSendingAsyncWithHttpInfo($sending_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSendingAsyncWithHttpInfo
     *
     * Détail d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSending'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSendingAsyncWithHttpInfo($sending_id, string $contentType = self::contentTypes['getSending'][0])
    {
        $returnType = '\Cube43\Component\MailEva\Model\SendingResponse';
        $request = $this->getSendingRequest($sending_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSending'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSending'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSendingRequest($sending_id, string $contentType = self::contentTypes['getSending'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling getSending'
            );
        }


        $resourcePath = '/sendings/{sending_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitSending
     *
     * Finalisation d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitSending'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function submitSending($sending_id, string $contentType = self::contentTypes['submitSending'][0])
    {
        $this->submitSendingWithHttpInfo($sending_id, $contentType);
    }

    /**
     * Operation submitSendingWithHttpInfo
     *
     * Finalisation d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitSending'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitSendingWithHttpInfo($sending_id, string $contentType = self::contentTypes['submitSending'][0])
    {
        $request = $this->submitSendingRequest($sending_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation submitSendingAsync
     *
     * Finalisation d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitSending'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitSendingAsync($sending_id, string $contentType = self::contentTypes['submitSending'][0])
    {
        return $this->submitSendingAsyncWithHttpInfo($sending_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitSendingAsyncWithHttpInfo
     *
     * Finalisation d&#39;un envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitSending'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitSendingAsyncWithHttpInfo($sending_id, string $contentType = self::contentTypes['submitSending'][0])
    {
        $returnType = '';
        $request = $this->submitSendingRequest($sending_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitSending'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitSending'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitSendingRequest($sending_id, string $contentType = self::contentTypes['submitSending'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling submitSending'
            );
        }


        $resourcePath = '/sendings/{sending_id}/submit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSender
     *
     * Modification des options d&#39;envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\Model\SendingUpdate $sending_update sending_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSender'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cube43\Component\MailEva\Model\SendingResponse|\Cube43\Component\MailEva\Model\ErrorsDto
     */
    public function updateSender($sending_id, $sending_update, string $contentType = self::contentTypes['updateSender'][0])
    {
        list($response) = $this->updateSenderWithHttpInfo($sending_id, $sending_update, $contentType);
        return $response;
    }

    /**
     * Operation updateSenderWithHttpInfo
     *
     * Modification des options d&#39;envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\Model\SendingUpdate $sending_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSender'] to see the possible values for this operation
     *
     * @throws \Cube43\Component\MailEva\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cube43\Component\MailEva\Model\SendingResponse|\Cube43\Component\MailEva\Model\ErrorsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSenderWithHttpInfo($sending_id, $sending_update, string $contentType = self::contentTypes['updateSender'][0])
    {
        $request = $this->updateSenderRequest($sending_id, $sending_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cube43\Component\MailEva\Model\SendingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\Model\SendingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\Model\SendingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cube43\Component\MailEva\Model\ErrorsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cube43\Component\MailEva\Model\ErrorsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cube43\Component\MailEva\Model\ErrorsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cube43\Component\MailEva\Model\SendingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\SendingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cube43\Component\MailEva\Model\ErrorsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSenderAsync
     *
     * Modification des options d&#39;envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\Model\SendingUpdate $sending_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSenderAsync($sending_id, $sending_update, string $contentType = self::contentTypes['updateSender'][0])
    {
        return $this->updateSenderAsyncWithHttpInfo($sending_id, $sending_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSenderAsyncWithHttpInfo
     *
     * Modification des options d&#39;envoi
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\Model\SendingUpdate $sending_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSenderAsyncWithHttpInfo($sending_id, $sending_update, string $contentType = self::contentTypes['updateSender'][0])
    {
        $returnType = '\Cube43\Component\MailEva\Model\SendingResponse';
        $request = $this->updateSenderRequest($sending_id, $sending_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSender'
     *
     * @param  string $sending_id Identifiant de l&#39;envoi (required)
     * @param  \Cube43\Component\MailEva\Model\SendingUpdate $sending_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSenderRequest($sending_id, $sending_update, string $contentType = self::contentTypes['updateSender'][0])
    {

        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling updateSender'
            );
        }

        // verify the required parameter 'sending_update' is set
        if ($sending_update === null || (is_array($sending_update) && count($sending_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_update when calling updateSender'
            );
        }


        $resourcePath = '/sendings/{sending_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sending_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sending_update));
            } else {
                $httpBody = $sending_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
