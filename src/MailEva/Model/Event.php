<?php
/**
 * Event
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cube43\Component\MailEva
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Maileva / Création et envoi de Lettres Recommandées Electroniques qualifiées
 *
 * API pour créer et envoyer des Lettres Recommandées Electroniques qualifiée  Elles comprennent les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options (Nom, Champ libre, référence dossier, référence client)  - envoyer ses lettres recommandées électroniques qualifiées.    **Paramétrage de compte expéditeur :**     Chaque expéditeur d'une Lettre Recommandée Electronique qualifiée doit posséder un compte expéditeur. Il est donc nécessaire de paramétrer son compte expéditeur en passant par l'API <a href=\"/developpeur/electronic_mail_emitter\"> electronic_mail_emitter</a> ou en se connectant à son espace client www.maileva.com et en suivant les étapes de paramétrage de compte sur le produit Lettre Recommandée Electronique qualifiée.     Une fois le paramétrage du compte finalisé, vous recevrez sous 72h, un recommandé papier à l'adresse postale de l'expéditeur. Il contient un QR Code, la clé OTP et les explications nécessaires pour l'utiliser et générer ses codes à usage unique. Ces informations sont personnelles et confidentielles.    **Authentification OTP :**    L'authentification OTP est obligatoire pour effectuer des envois de Lettres Recommandées Electroniques qualifiées. La clé OTP doit être demandée à l'expéditeur à chaque envoi. Elle permet de générer un code à usage unique permettant une authentification à un niveau renforcé. Cette clé OTP ne doit pas être stockée dans votre application.     Pour générer un code à usage unique vous pouvez :     - Demander à l'expéditeur de télécharger une application mobile telle Google Authenticator ou Free OTP puis de scanner le QR Code sur son smartphone.     - Demander à l'expéditeur d'utiliser un générateur de codes à usage unique depuis son navigateur (par exemple : https://otp-client.ar24.fr/) et de recopier sa clé OTP de 32 caractères présente sur les identifiants papiers obtenus.
 *
 * The version of the OpenAPI document: 1.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cube43\Component\MailEva\Model;

use \ArrayAccess;
use \Cube43\Component\MailEva\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @package  Cube43\Component\MailEva
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Event implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_mail' => 'string',
        'new_state' => 'string',
        'proof_url' => 'string',
        'view_date' => 'string',
        'refused_date' => 'string',
        'negligence_date' => 'string',
        'ts_ev_date' => 'string',
        'id_consent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_mail' => null,
        'new_state' => null,
        'proof_url' => null,
        'view_date' => null,
        'refused_date' => null,
        'negligence_date' => null,
        'ts_ev_date' => null,
        'id_consent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_mail' => false,
		'new_state' => false,
		'proof_url' => false,
		'view_date' => false,
		'refused_date' => false,
		'negligence_date' => false,
		'ts_ev_date' => false,
		'id_consent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_mail' => 'id_mail',
        'new_state' => 'new_state',
        'proof_url' => 'proof_url',
        'view_date' => 'view_date',
        'refused_date' => 'refused_date',
        'negligence_date' => 'negligence_date',
        'ts_ev_date' => 'ts_ev_date',
        'id_consent' => 'id_consent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_mail' => 'setIdMail',
        'new_state' => 'setNewState',
        'proof_url' => 'setProofUrl',
        'view_date' => 'setViewDate',
        'refused_date' => 'setRefusedDate',
        'negligence_date' => 'setNegligenceDate',
        'ts_ev_date' => 'setTsEvDate',
        'id_consent' => 'setIdConsent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_mail' => 'getIdMail',
        'new_state' => 'getNewState',
        'proof_url' => 'getProofUrl',
        'view_date' => 'getViewDate',
        'refused_date' => 'getRefusedDate',
        'negligence_date' => 'getNegligenceDate',
        'ts_ev_date' => 'getTsEvDate',
        'id_consent' => 'getIdConsent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id_mail', $data ?? [], null);
        $this->setIfExists('new_state', $data ?? [], null);
        $this->setIfExists('proof_url', $data ?? [], null);
        $this->setIfExists('view_date', $data ?? [], null);
        $this->setIfExists('refused_date', $data ?? [], null);
        $this->setIfExists('negligence_date', $data ?? [], null);
        $this->setIfExists('ts_ev_date', $data ?? [], null);
        $this->setIfExists('id_consent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_mail
     *
     * @return string|null
     */
    public function getIdMail()
    {
        return $this->container['id_mail'];
    }

    /**
     * Sets id_mail
     *
     * @param string|null $id_mail id_mail
     *
     * @return self
     */
    public function setIdMail($id_mail)
    {
        if (is_null($id_mail)) {
            throw new \InvalidArgumentException('non-nullable id_mail cannot be null');
        }
        $this->container['id_mail'] = $id_mail;

        return $this;
    }

    /**
     * Gets new_state
     *
     * @return string|null
     */
    public function getNewState()
    {
        return $this->container['new_state'];
    }

    /**
     * Sets new_state
     *
     * @param string|null $new_state new_state
     *
     * @return self
     */
    public function setNewState($new_state)
    {
        if (is_null($new_state)) {
            throw new \InvalidArgumentException('non-nullable new_state cannot be null');
        }
        $this->container['new_state'] = $new_state;

        return $this;
    }

    /**
     * Gets proof_url
     *
     * @return string|null
     */
    public function getProofUrl()
    {
        return $this->container['proof_url'];
    }

    /**
     * Sets proof_url
     *
     * @param string|null $proof_url proof_url
     *
     * @return self
     */
    public function setProofUrl($proof_url)
    {
        if (is_null($proof_url)) {
            throw new \InvalidArgumentException('non-nullable proof_url cannot be null');
        }
        $this->container['proof_url'] = $proof_url;

        return $this;
    }

    /**
     * Gets view_date
     *
     * @return string|null
     */
    public function getViewDate()
    {
        return $this->container['view_date'];
    }

    /**
     * Sets view_date
     *
     * @param string|null $view_date view_date
     *
     * @return self
     */
    public function setViewDate($view_date)
    {
        if (is_null($view_date)) {
            throw new \InvalidArgumentException('non-nullable view_date cannot be null');
        }
        $this->container['view_date'] = $view_date;

        return $this;
    }

    /**
     * Gets refused_date
     *
     * @return string|null
     */
    public function getRefusedDate()
    {
        return $this->container['refused_date'];
    }

    /**
     * Sets refused_date
     *
     * @param string|null $refused_date refused_date
     *
     * @return self
     */
    public function setRefusedDate($refused_date)
    {
        if (is_null($refused_date)) {
            throw new \InvalidArgumentException('non-nullable refused_date cannot be null');
        }
        $this->container['refused_date'] = $refused_date;

        return $this;
    }

    /**
     * Gets negligence_date
     *
     * @return string|null
     */
    public function getNegligenceDate()
    {
        return $this->container['negligence_date'];
    }

    /**
     * Sets negligence_date
     *
     * @param string|null $negligence_date negligence_date
     *
     * @return self
     */
    public function setNegligenceDate($negligence_date)
    {
        if (is_null($negligence_date)) {
            throw new \InvalidArgumentException('non-nullable negligence_date cannot be null');
        }
        $this->container['negligence_date'] = $negligence_date;

        return $this;
    }

    /**
     * Gets ts_ev_date
     *
     * @return string|null
     */
    public function getTsEvDate()
    {
        return $this->container['ts_ev_date'];
    }

    /**
     * Sets ts_ev_date
     *
     * @param string|null $ts_ev_date ts_ev_date
     *
     * @return self
     */
    public function setTsEvDate($ts_ev_date)
    {
        if (is_null($ts_ev_date)) {
            throw new \InvalidArgumentException('non-nullable ts_ev_date cannot be null');
        }
        $this->container['ts_ev_date'] = $ts_ev_date;

        return $this;
    }

    /**
     * Gets id_consent
     *
     * @return string|null
     */
    public function getIdConsent()
    {
        return $this->container['id_consent'];
    }

    /**
     * Sets id_consent
     *
     * @param string|null $id_consent id_consent
     *
     * @return self
     */
    public function setIdConsent($id_consent)
    {
        if (is_null($id_consent)) {
            throw new \InvalidArgumentException('non-nullable id_consent cannot be null');
        }
        $this->container['id_consent'] = $id_consent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


